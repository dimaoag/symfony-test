# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.admin_email: '%env(ADMIN_EMAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            # по желанию вы можете определить имя и тип аргумента для сопоставления
            string $adminEmail: 'manager@example.com'
            Psr\Log\LoggerInterface $requestLogger: '@monolog.logger.request'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # это id сервиса
    site_update_manager.superadmin:
        class: App\Service\SomeTest\SiteUpdate\SiteUpdateManager
        # вы все еще МОЖЕТЕ использовать автомонтирование: мы просто хотим показать, как это вылядит без него
        autowire: false
        # вручную подключите все аргументы
        arguments:
            - '@App\Service\SomeTest\SiteUpdate\MessageGenerator'
            - '@mailer'
            - 'superadmin@example.com'

    site_update_manager.normal_users:
        class: App\Service\SomeTest\SiteUpdate\SiteUpdateManager
        autowire: false
        arguments:
            - '@App\Service\SomeTest\SiteUpdate\MessageGenerator'
            - '@mailer'
            - 'contact@example.com'

    # Создайте псевдоним, чтобы по умолчанию, если вы используете подсказку SiteUpdateManager,
    # использовался site_update_manager.superadmin
    App\Service\SomeTest\SiteUpdate\SiteUpdateManager: '@site_update_manager.superadmin'

    App\ArgumentResolver\SpecificTypeValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 50 }

    App\Service\SomeTest\SiteUpdate\MessageGenerator:
        arguments:
            $adminEmail: '%app.admin_email%'


    App\Service\SomeTest\Transformer\Rot13Transformer:
        alias: ~
#        calls:
#            - method: setLogger
#              arguments:
#                  - '@logger'

    App\Service\SomeTest\Transformer\UppercaseTransformer: ~

    # сервис ``App\Service\SomeTest\Transformer\UppercaseTransformer`` будет внедрен, когда
    # будет обнаружена подсказка ``App\Service\SomeTest\Transformer\TransformerInterface``
    # для аргумента ``$shoutyTransformer``.
    App\Util\TransformerInterface $shoutyTransformer: '@App\Service\SomeTest\Transformer\UppercaseTransformer'

    # Если аргумент, используемый для внедрения, не совпадает, а подсказка
    # совпадает, будет внедрен сервис
    # ``App\Service\SomeTest\Transformer\Rot13Transformer``.
    App\Service\SomeTest\Transformer\TransformerInterface: '@App\Service\SomeTest\Transformer\Rot13Transformer'